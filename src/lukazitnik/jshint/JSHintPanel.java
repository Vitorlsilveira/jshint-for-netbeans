package lukazitnik.jshint;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.Reader;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.Scriptable;
import org.openide.filesystems.FileUtil;
import org.openide.modules.InstalledFileLocator;
import org.openide.util.NbBundle;
import org.openide.util.NbPreferences;

final class JSHintPanel extends javax.swing.JPanel {

    class JSFilesOnlyFilter extends FileFilter {

        @Override
        public boolean accept(File file) {
            return file.isDirectory() || FileUtil.toFileObject(file).getMIMEType().equals("text/javascript");
        }

        @Override
        public String getDescription() {
            return "JavaScript Files";
        }
    }

    class JSFileVerifier extends InputVerifier {

        private Scriptable scope;

        JSFileVerifier() {
            Context cx = Context.enter();
            scope = cx.initStandardObjects();
            Context.exit();
        }

        @Override
        public boolean verify(JComponent jc) {
            File file = new File(((JTextField) jc).getText());
            Context cx = Context.enter();

            if (scope.has("JSHINT", scope)) {
                scope = cx.initStandardObjects();
            }

            try {
                Reader in = new BufferedReader(new FileReader(file));
                cx.evaluateReader(scope, in, "jshint.js", 1, null);
            } catch (Exception ex) {
                Context.exit();
                return false;
            }

            Context.exit();

            return scope.has("JSHINT", scope) != false;
        }
    }

    private final JSHintOptionsPanelController controller;
    private final String defaultJSFile = InstalledFileLocator.getDefault().locate("jshint.js", "lukazitnik.jshint", false).getPath();
    private final JSFileVerifier jSFileVerifier = new JSFileVerifier();

    JSHintPanel(final JSHintOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        jSFileTextField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent de) {
                anyUpdate(de);
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                anyUpdate(de);
            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                anyUpdate(de);
            }

            private void anyUpdate(DocumentEvent de) {
                controller.changed(!jSFileTextField.getText().equals(defaultJSFile));
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jSFileLabel = new javax.swing.JLabel();
        jSFileTextField = new javax.swing.JTextField();
        defaultJSFileButton = new javax.swing.JButton();
        browseForJSFileButton = new javax.swing.JButton();
        jSFileInfo = new javax.swing.JLabel();

        fileChooser.setDialogTitle(org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.fileChooser.dialogTitle")); // NOI18N
        fileChooser.setFileFilter(new JSFilesOnlyFilter());

        setPreferredSize(new java.awt.Dimension(600, 58));

        org.openide.awt.Mnemonics.setLocalizedText(jSFileLabel, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.jSFileLabel.text")); // NOI18N

        jSFileTextField.setText(org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.jSFileTextField.text")); // NOI18N
        jSFileTextField.setInputVerifier(jSFileVerifier);

        org.openide.awt.Mnemonics.setLocalizedText(defaultJSFileButton, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.defaultJSFileButton.text")); // NOI18N
        defaultJSFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultJSFileButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(browseForJSFileButton, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.browseForJSFileButton.text")); // NOI18N
        browseForJSFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseForJSFileButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jSFileInfo, org.openide.util.NbBundle.getMessage(JSHintPanel.class, "JSHintPanel.jSFileInfo.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSFileLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSFileInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(browseForJSFileButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(defaultJSFileButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSFileLabel)
                    .addComponent(jSFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(defaultJSFileButton)
                    .addComponent(browseForJSFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSFileInfo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void defaultJSFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultJSFileButtonActionPerformed
        jSFileTextField.setText(defaultJSFile);
    }//GEN-LAST:event_defaultJSFileButtonActionPerformed

    private void browseForJSFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseForJSFileButtonActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            jSFileTextField.setText(file.getPath());
        }
    }//GEN-LAST:event_browseForJSFileButtonActionPerformed

    void load() {
        jSFileTextField.setText(NbPreferences.forModule(JSHintPanel.class).get("jshint.js", defaultJSFile));
    }

    void store() {
        NbPreferences.forModule(JSHintPanel.class).put("jshint.js", jSFileTextField.getText());
    }

    @NbBundle.Messages(
            "ERR_BadJSFile=The file doesn't look right."
    )
    boolean valid() {
        boolean jSFileValid = jSFileVerifier.verify(jSFileTextField);

        if (jSFileValid) {
            jSFileInfo.setText("");
            jSFileInfo.setForeground(UIManager.getColor("Label.foreground"));
        } else {
            jSFileInfo.setText(Bundle.ERR_BadJSFile());
            jSFileInfo.setForeground(Color.red);
        }

        return jSFileValid;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseForJSFileButton;
    private javax.swing.JButton defaultJSFileButton;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel jSFileInfo;
    private javax.swing.JLabel jSFileLabel;
    private javax.swing.JTextField jSFileTextField;
    // End of variables declaration//GEN-END:variables
}
